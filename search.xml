<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>移动端测试学习（三）</title>
      <link href="./2020/10/22/yi-dong-duan-ce-shi-xue-xi-san/"/>
      <url>./2020/10/22/yi-dong-duan-ce-shi-xue-xi-san/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ADB-简介"><a href="#一、ADB-简介" class="headerlink" title="一、ADB 简介"></a>一、ADB 简介</h2><p>ADB 即 Android Debug Bridge，Android 调试桥的缩写，ADB 是一个 C / S 架构的命令行工具，主要由 3 部分组成：</p><p>1）运行在 PC 端的 Client，可以通过它对 Android 应用进行安装、卸载及调试。</p><pre><code>注意：1）Eclipse 中的 ADT、SDK Tools 目录下的 DDMS、Monitor 等工具，都是同样地用到了 ADB 的功能来与 Android 设备进行交互。2）PC 端的手机助手，诸如 360 手机助手、豌豆荚、应用宝等，其除了安装第三方应用方便，其他的功能，基本上都可以通过 ADB 命令去完成，这里建议测试人员尽量不要在电脑上安装这类手机助手，因为其自带的 ADB 程序可能会与 Android SDK 下的 ADB 程序产生冲突，5037端口被占用，导致使用 ADB 命令时无法连接到设备。</code></pre><p>2）运行在 PC 端的 Service，其管理客户端到 Android 设备上 ADB 后台进程的连接。</p><pre><code>注意：1）ADB 服务启动后，Windows 可以在任务管理器中找到 adb.exe 这个进程。</code></pre><p>3）运行在 Android 设备上的 ADB 后台进程。</p><pre><code>注意：1）执行 adb shell ps | grep adbd ，可以找到该后台进程，windows 请使用 findstr 替代 grep2）ADB 的使用端口号为5037</code></pre><h2 id="二、为什么使用-ADB"><a href="#二、为什么使用-ADB" class="headerlink" title="二、为什么使用 ADB"></a>二、为什么使用 ADB</h2><p>现有 Android 系统的权限机制越来越完善，很多希望能够绕开权限管理机制进行的一些操作都已经无法使用，但是 ADB 却可以实现，实际上 ADB 在某种程度上有很大权限的，即使是在最新版本的 Android 系统上，因为 ADB 的设计初衷是为了方便开发人员调试，因此必然需要暴露一些权限以外的接口，于是很多公司利用这个特性可以绕开权限机制在非 Root 非定制机上做一些操作（具体用法就是下面说的这些），当然方式也是五花八门，比如通过手机 OTG 连接，这里不再赘述，通过 ADB 命令协助开发人员在开发 Android 应用的过程中更快更好的调试 APK，因此 ADB 具有安装卸载 APK、拷贝推送文件、查看设备硬件信息、查看应用程序占用资源、在设备执行 shell 命令等功能。</p><h2 id="三、ADB-命令"><a href="#三、ADB-命令" class="headerlink" title="三、ADB 命令"></a>三、ADB 命令</h2><h3 id="3-1-设备管理"><a href="#3-1-设备管理" class="headerlink" title="3.1 设备管理"></a>3.1 设备管理</h3><ul><li><strong>adb devices</strong></li></ul><p>测试过程中，我们可以通过 adb devices 获取设备列表及设备状态。</p><pre><code># 获取设备列表及设备状态adb devices</code></pre><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022161109661.png" alt="image-20201022161109661"></p><p>另外，也可用 ADB 命令管理多台设备</p><pre><code># 管理多台设备adb [-e | -d | -s &lt;设备序列号&gt;] &lt;子命令&gt;</code></pre><ul><li><strong>adb root / adb remount</strong></li></ul><p>获取 root 权限，一般 adb root 和 adb remount 一起使用，未获取权限前，使用 adb shell 看到的用户信息符号为 $ 符号，获取 root 权限后，看到的用户信息符号为 # 符号。</p><pre><code># 获取 root 权限adb rootadb remount</code></pre><ul><li><strong>adb get-state</strong></li></ul><p>获取设备的状态，其中设备的状态有3种，device：设备正常连接，offline：连接出现异常，设备无响应，unknown：没有连接设备。</p><pre><code># 获取设备的状态adb get-state</code></pre><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022161601674.png" alt="image-20201022161601674"></p><h3 id="3-2-安装-卸载应用"><a href="#3-2-安装-卸载应用" class="headerlink" title="3.2 安装/卸载应用"></a>3.2 安装/卸载应用</h3><ul><li><strong>adb install [apk 路径] / adb uninstall [apk 包名]</strong></li></ul><p>安装应用 / 卸载应用，覆盖安装是使用 -r 选项，载时保存数据和缓存目录是使用 -k 选项。</p><pre><code># 安装应用adb install [apk 路径]adb install -r [apk 路径]# 卸载应用adb uninstall [apk 包名]adb uninstall -k [apk 包名]</code></pre><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022163303606.png" alt="image-20201022163303606"></p><p>adb uninstall 涉及到包名的查看，因此这里先不做演示。</p><h3 id="3-3-文件管理"><a href="#3-3-文件管理" class="headerlink" title="3.3 文件管理"></a>3.3 文件管理</h3><ul><li><strong>adb push [本地路径] [Android 设备路径] / adb pull [Android 设备路径] [本地路径]</strong></li></ul><p>将本地文件放入 Android 设备，将 Android 设备文件取出。</p><pre><code># 将本地文件放入 Android 设备adb push [本地路径] [Android 设备路径]# 将 Android 设备文件取出adb pull [Android 设备路径] [本地路径]</code></pre><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022171255161.png" alt="image-20201022171255161"></p><h3 id="3-4-设备重启"><a href="#3-4-设备重启" class="headerlink" title="3.4 设备重启"></a>3.4 设备重启</h3><ul><li><strong>adb reboot</strong></li></ul><p>重启设备</p><pre><code># 重启设备，进入 fastboot 模式adb reboot-bootloader# 重启设备，进入 recovery 模式adb reboot-recovery</code></pre><h2 id="四、ADB-LOGCAT-命令"><a href="#四、ADB-LOGCAT-命令" class="headerlink" title="四、ADB LOGCAT 命令"></a>四、ADB LOGCAT 命令</h2><p>在移动端测试中，用得比较多的，应该是 adb logcat 命令，使用 adb logcat 命令显示 Android 设备上的 log 日志，我们通常需要通过 adb logcat 这个命令去定位某些问题，例如产品在使用过程中突然 crash，或者抓取缺陷复现过程中的 log 等。</p><p>首先，可以通过 adb logcat -help 获取 logcat 命令使用帮助，查看 logcat 都有哪些用法：</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022174841959.png" alt="image-20201022174841959"></p><p>下面简单介绍几个用的比较多的抓取 log 的命令：</p><p>1）adb logcat -v time &gt; log.txt：打印日志详细时间，并保存在本地的 log.txt 文件中。</p><p>2）adb logcat -v time <em>:E：</em>打印时间和级别是 Error 的日志。</p><p>3）adb logcat | grep keyword：过滤关键字以外数据。</p><p>4）adb logcat -c：清除日志。</p><p>5）adb logcat -t 5：显示最后五条。</p><h2 id="五、ADB-SHELL-命令"><a href="#五、ADB-SHELL-命令" class="headerlink" title="五、ADB SHELL 命令"></a>五、ADB SHELL 命令</h2><p>什么是 adb shell 命令？首先我们要知道，Android 是基于 Linux 的自由及开放源代码的操作系统，因此，Linux 中的 shell 命令在 Android 中也是适用的，也就是所谓的 adb shell 命令，adb shell 命令都以二进制的形式存放在 Android 中的 system/bin 文件夹下，接下来看一下有哪些常用的 adb shell 命令。</p><ul><li>adb shell cat /proc/meminfo    查看内存信息</li><li>adb shell cat /proc/cpuinfo    查看 cpu 信息</li><li>adb shell dumpsys activity    列出设备上的 activity 栈和任务的信息，还有其他组件的一些信息和一些关于进程的信息。</li><li>adb shell dumpsys packages    列出一些系统信息和所有应用的信息。</li><li>adb shell pm list permissions     列出目标平台上的所有权限。</li><li>adb shell pm list packages    列出目标设备上安装的所有 app 的包名。</li><li>adb shell pm list features    列出目标设备上的所有 feature。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动端测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
            <tag> 移动端测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium for python（一）</title>
      <link href="./2020/10/22/selenium-for-python-yi/"/>
      <url>./2020/10/22/selenium-for-python-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、selenium-概述"><a href="#一、selenium-概述" class="headerlink" title="一、selenium 概述"></a>一、selenium 概述</h2><h3 id="1-1-selenium-简介"><a href="#1-1-selenium-简介" class="headerlink" title="1.1 selenium 简介"></a>1.1 selenium 简介</h3><p>selenium 是一个基于 web 应用的自动化框架，selenium 提供的 api，能够帮助我们完成页面元素定位、页面元素的操作，selenium 具有如下特点：</p><pre><code>1）多浏览器支持：如 chrome、firefox、edge、ie 等；2）多语言支持：如 java、python、php、c# 等；3）多操作系统支持：如 windows、linux、macos 等；4）开源免费。</code></pre><blockquote><p>selenium 官网：<a href="http://www.seleniumhg.org/">http://www.seleniumhg.org/</a></p></blockquote><h3 id="1-2-selenium-组成"><a href="#1-2-selenium-组成" class="headerlink" title="1.2 selenium 组成"></a>1.2 selenium 组成</h3><p>selenium 由四个主要组成部分组成，包括：Selenium IDE，Selenium RC，Selenium WebDriver 和 Selenium Grid。</p><pre><code>1）Selenium IDE：Selenium IDE 即 selenium 集成开发环境，它可以从 chrome、firefox 商店中安装，它可以在测试脚本上提供记录和回放功能，可以以多种语言（java、python、c#）形式导出脚本，可在 Selenium RC 或 Selenium WebDriver 中使用。2）Selenium RC：Selenium RC 即 selenium 远程控制器，现已去掉，可以通过它来使用所有它支持的编程语言来实现 web 自动化，另外，它还涉及一个 HTTP 代理服务器，它使浏览器能够相信正在测试的 Web 应用程序来自代理服务器提供的域。- Selenium RC Server：充当 Web 请求的 HTTP 代理。- Selenium RC Client：包含编程语言代码的库。3）Selenium WebDriver：4）Selenium Grid：</code></pre><h3 id="1-3-selenium-原理"><a href="#1-3-selenium-原理" class="headerlink" title="1.3 selenium 原理"></a>1.3 selenium 原理</h3><p>1）运行自动化脚本，首先，会打开指定的浏览器，webdriver 将目标浏览器绑定到特定端口，启动后的浏览器即 webdriver 的 remote server，用来执行脚本命令。</p><p>2）浏览器启动后，selenium 相关操作会通过 RemoteConnection 链接 remote server，然后使用 execute 方法调用 _request() 方法通过 urlib3 向 remote server 发送请求。</p><p>3）浏览器通过请求内容执行相应操作。</p><p>4）浏览器把执行动作结果通过浏览器驱动程序返回给自动化脚本。</p><h2 id="二、selenium-环境搭建"><a href="#二、selenium-环境搭建" class="headerlink" title="二、selenium 环境搭建"></a>二、selenium 环境搭建</h2><h3 id="2-1-python-环境搭建"><a href="#2-1-python-环境搭建" class="headerlink" title="2.1 python 环境搭建"></a>2.1 python 环境搭建</h3><p>1）下载 python</p><p>python 官网：<a href="https://www.python.org/">https://www.python.org/</a></p><p>选择 download，windows（这里演示的操作系统是 win10），之后下载即可。</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201103094957273.png" alt="image-20201103094957273"></p><p>2）安装、配置 python</p><p>直接安装，next 到底即可，这里注意安装过程中，需要选择 “Add Python 3.x to PATH” ，安装完成后，在命令行中输入 python -version，若输出 python 版本号，则证明安装成功，由此，完成了 python 环境的搭建工作。</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201103095449676.png" alt="image-20201103095449676"></p><h3 id="2-2-selenium-环境搭建"><a href="#2-2-selenium-环境搭建" class="headerlink" title="2.2 selenium 环境搭建"></a>2.2 selenium 环境搭建</h3><p>在命令行输入 pip install selenium 即可自动安装 selenium，安装完成后，输入 pip show selenium 可查看当前的 selenium 版本。</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201103095916263.png" alt="image-20201103095916263"></p><h3 id="2-3-selenium-浏览器驱动"><a href="#2-3-selenium-浏览器驱动" class="headerlink" title="2.3 selenium 浏览器驱动"></a>2.3 selenium 浏览器驱动</h3><p>chromedriver：<a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a></p><p>geckodriver：<a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></p><p>iedriver：<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a>?</p><p>注意：driver 版本与浏览器版本应对应，避免出现闪退或版本冲突问题。</p><p>下载解压后，将浏览器驱动复制到 python 的安装目录，例如 E:\python， 然后将 python 的安装目录添加到系统环境变量的 path ，验证是否安装成功，（以 chromedriver 为例）可在命令输入 chromedriver，可查看 chromedriver 的版本即表明安装成功。</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201103100356197.png" alt="image-20201103100356197"></p><h2 id="三、selenium-简单例子"><a href="#三、selenium-简单例子" class="headerlink" title="三、selenium 简单例子"></a>三、selenium 简单例子</h2><p>简单写一个例子来验证 selenium 的环境是否搭建成功：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment" spellcheck="true"># 创建 driver 驱动</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开百度搜索页面</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取文本框，输入 selenium</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取百度一下按钮，点击搜索</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待 2 秒</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 退出浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行代码，若能成功打开浏览器，并执行相应的操作，则证明环境已经配置完成，另外，解释一下以上代码，首先，需要将本地的浏览器驱动 .exe 文件引用进来，之后创建一个 driver 驱动，调用 webdriver 封装好的方法去获取需要打开的页面，以及相应的执行操作。</p><p>自此，selenium 如何去搭建就已经全部讲完，从下一篇系列文章开始，将主要来讲一讲 selenium 的相关操作。</p>]]></content>
      
      
      <categories>
          
          <category> selenium for python 系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webui 自动化测试 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端测试学习（一）</title>
      <link href="./2020/10/22/yi-dong-duan-ce-shi-xue-xi-yi/"/>
      <url>./2020/10/22/yi-dong-duan-ce-shi-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、UI测试"><a href="#一、UI测试" class="headerlink" title="一、UI测试"></a>一、UI测试</h2><p>UI 测试的目的是确保软件的各个页面的布局、样式是否与原型设计稿相符。</p><h2 id="二、业务功能测试"><a href="#二、业务功能测试" class="headerlink" title="二、业务功能测试"></a>二、业务功能测试</h2><p>这里说的大多数指黑盒测试，目的是检查程序功能是否按照需求文档的要求，业务功能测试包括了功能点测试、业务逻辑测试、关联性测试：</p><p>1）功能点测试：以产品功能需求文档等作为依据，测试产品各个模块的功能点是否正常。</p><p>2）业务逻辑测试：检查业务逻辑是否正常。</p><p>3）关联性测试：与 PC 端的交互情况。</p><h2 id="三、兼容性测试"><a href="#三、兼容性测试" class="headerlink" title="三、兼容性测试"></a>三、兼容性测试</h2><p>兼容性测试涉及到了测试设备的系统版本、分辨率、机型，这些都可以根据实际软件用户占比进行调整。</p><h2 id="四、稳定性测试"><a href="#四、稳定性测试" class="headerlink" title="四、稳定性测试"></a>四、稳定性测试</h2><p>稳定性测试，目的是保证程序能够长时间稳定运行，该测试通过随机或固定的操作，看看产品会不会出现 carsh 或者是内存溢出现象（类似压力测试），一般常用测试工具有 Monkey 等，测试方法例如：</p><p>1）断电、断网等情况操作。</p><p>2）待机、插拔数据线等。</p><p>3）编写 Monkey 命令，通过 logcat 定位问题。</p><h2 id="四、易用性测试"><a href="#四、易用性测试" class="headerlink" title="四、易用性测试"></a>四、易用性测试</h2><p>易用性测试关注的是人机交互的情况，包括了产品的可用性，界面交互性，用户体验等：</p><p>1）产品可用性测试：使用产品的错误率、操作是否简单等。</p><p>2）界面交互性：是否使用是否方便、是否符合交互规范等。</p><p>3）用户体验：以主观的普通消费者的角度去感知产品或服务的舒适、有用、易用、友好亲切程度，通过不同个体、独立空间和非经验的统计复用方式去有效评价产品的体验特性提出修改意见提升产品的潜在客户满意度。</p><h2 id="五、性能测试"><a href="#五、性能测试" class="headerlink" title="五、性能测试"></a>五、性能测试</h2><p>性能测试包括接口性能、CPU、内存、启动时间、访问速度、流量、耗电等测试点。</p><h2 id="六、安全性测试"><a href="#六、安全性测试" class="headerlink" title="六、安全性测试"></a>六、安全性测试</h2><p>安全性的测试包括对软件权限的检查、安装与卸载的安全性、数据安全性、通讯安全性、人机接口安全性等。</p><h2 id="七、其他测试"><a href="#七、其他测试" class="headerlink" title="七、其他测试"></a>七、其他测试</h2><p>1）安装卸载升级测试</p><p>2）网络环境测试：wifi / 2G / 3G / 4G / 5G，net / wap，电信 / 移动 / 联通。</p><p>3）手势操作测试</p><p>4）回归测试</p><p>5）交叉事件测试：针对智能终端应用的服务等级划分方式及实时特性所提出的测试方法，交叉测试又叫事件或冲突测试，是指一个功能正在执行过程中，同时另外一个事件或操作对该过程进行干扰的测试，如：App 在前 / 后台运行状态时与来电、文件下载、音乐收听等关键运用的交互情况测试等，交叉事件测试非常重要，能发现很多应用中潜在的性能问题。</p><p><img src="https://gitee.com/isKylin/picbed/raw/master/webAutoTest/image-20201022141141004.png" alt="image-20201022141141004"></p>]]></content>
      
      
      <categories>
          
          <category> 移动端测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
            <tag> 移动端测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端测试学习（二）</title>
      <link href="./2020/10/22/yi-dong-duan-ce-shi-xue-xi-er/"/>
      <url>./2020/10/22/yi-dong-duan-ce-shi-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Java-环境搭建"><a href="#一、Java-环境搭建" class="headerlink" title="一、Java 环境搭建"></a>一、Java 环境搭建</h2><h2 id="二、Android-SDK-环境搭建"><a href="#二、Android-SDK-环境搭建" class="headerlink" title="二、Android SDK 环境搭建"></a>二、Android SDK 环境搭建</h2><h2 id="三、Android-模拟器下载"><a href="#三、Android-模拟器下载" class="headerlink" title="三、Android 模拟器下载"></a>三、Android 模拟器下载</h2>]]></content>
      
      
      <categories>
          
          <category> 移动端测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
            <tag> 移动端测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
